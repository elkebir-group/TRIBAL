configfile: "config.yml"


def get_files(dirn, fname):
    targets = []
    clonotypes = []
    for d in config["dataset"]:
        
        with open(f"{d}/clonotypes.txt", 'r+') as file:
            for line in file:
                clonotypes.append(line.strip())
   
        for c in clonotypes:
                targets.append(f"{d}/{dirn}/{c}/{fname}")
    return targets 



rule all:
    input: 
        get_files("tribal", "scores.csv")



rule prep_input:
    input: 
        clonotypes="{dataset}/clonotypes.txt",
        encoding = "isotype_encoding.txt",
    params:
        fasta = "heavy.fasta",
        tree_path = "./{dataset}",
        inpath = "./{dataset}/input",
        root = "naive",
    output: "{dataset}/tribal/input.pickle"
    shell:
        "python ../src/prep_parsimony_forest.py --clonotypes {input.clonotypes} "
        "--encoding {input.encoding} -p {params.inpath} "
        "--tree_path {params.tree_path} -r {params.root} "
        "--fasta {params.fasta} -o {output} "


rule tribal:
    input: 
        forest = "{dataset}/tribal/input.pickle",
        encoding = "isotype_encoding.txt",
    params:
        max_cand = config["max_cand"],
        niter = config["niter"],
        thresh = config["threshold"],
        seed = lambda wildcards: int(wildcards.dataset.split("_")[1]),
        root = "naive",
        restarts = config["nrestarts"],
        mode = "refine_ilp",
    threads: config["nworkers"]
    output:
        transmat = "{dataset}/tribal/transmat.txt",
        heatmap = "{dataset}/tribal/transmat.pdf",
        score = "{dataset}/tribal/fit_score.csv"
    log:
        std = "{dataset}/tribal/fit.log",
        err = "{dataset}/tribal/fit.err.log"
    benchmark: "{dataset}/tribal/benchmark.log"
    shell:
        "python ../src/tribal.py --forest {input.forest} "
        "-r {params.root} -e {input.encoding} -s {params.seed}  "
        " --niter {params.niter} --mode {params.mode} "
        "--thresh {params.thresh} --transmat_infer {output.transmat}  "
        "--score {output.score}  "  
        "--nworkers {threads} --restarts {params.restarts} "
        "--heatmap {output.heatmap} > {log.std} 2> {log.err} "    


rule tribal_refine:
    input: 
        forest = "{dataset}/tribal/input.pickle",
        encoding = "isotype_encoding.txt",
        transmat =  "{dataset}/tribal/transmat.txt",
    output: 
        tree= "{dataset}/tribal/{clonotype}/tree.txt",
        isotypes= "{dataset}/tribal/{clonotype}/isotypes.csv",
        score= "{dataset}/tribal/{clonotype}/scores.csv",
        png = "{dataset}/tribal/{clonotype}/tree.png",
        opts = directory("{dataset}/tribal/{clonotype}/opt_trees"),
        pickle_best = "{dataset}/tribal/{clonotype}/best_trees.pickle"
    params:
        root = "naive",
        mode = "refine_ilp"
    threads: config['nworkers']
    log: 
        run= "{dataset}/tribal/{clonotype}/refine.log",
        err ="{dataset}/tribal/{clonotype}/refine.err.log"  
    benchmark: "{dataset}/tribal/{clonotype}/refine.benchmark.log" 
    shell:
        "python ../src/tribal_tree.py "
        " -r {params.root} "
        " -f {input.forest} "
        "-c {wildcards.clonotype} "
        "-t {input.transmat} "
        "-e {input.encoding} "
        "--score {output.score} "
        "--iso_infer {output.isotypes} "
        "--png {output.png} "
        "--mode {params.mode} "
        "--all_optimal_sol {output.opts} "
        "--nworkers {threads} "
        "--tree {output.tree} "
        "--pickle_best {output.pickle_best} > {log.run} 2> {log.err} "  

   
