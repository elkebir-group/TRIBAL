configfile: "config.yml"



def get_files(dirn, fname):
    targets = []

    clonotypes = []
    with open(f"clonotypes.txt", 'r+') as file:
        for line in file:
            clonotypes.append(line.strip())

    for c in clonotypes:
            targets.append(f"{dirn}/{c}/{fname}")
    return targets 



# rule all:
#     input: 
#         get_files("tribal", "scores.csv")

rule all:
    input: 
        # "clonotypes.txt"
        "tribal/transmat.txt",
        get_files("tribal", "scores.csv")


rule prep_input:
    input: 
        data="human_data.csv",
        roots= "human_data_root_seq.csv",
        encoding = "human_encoding.txt",
    params:
        min_size = 4
    output: 
        clonodict = "clonotypes.pkl",
        df_filtered = "human_data.filtered.csv",
        clonotype_list = "clonotypes.txt"
    log:
        std = "preprocess.log",
        err = "preprocess.err.log"
    shell:
        "python ../src/preprocess.py -f {input.data} -r {input.roots} "
        "--encoding {input.encoding} --min-size {params.min_size} "
        "--dataframe {output.df_filtered} --clonotypes {output.clonotype_list} "
        "-P {output.clonodict} > {log.std} 2> {log.err} "


rule tribal:
    input: 
        forest = "clonotypes.pkl",
        encoding = "human_encoding.txt",
    params:
        max_cand = config["max_cand"],
        niter = config["niter"],
        thresh = config["threshold"],
        seed = config["seed"],
        root = "naive",
        restarts = config["nrestarts"],
        mode = "refine_ilp",
    threads: config["nworkers"]
    output:
        transmat = "tribal/transmat.txt",
        heatmap = "tribal/transmat.pdf",
        score = "tribal/fit_score.csv"
    log:
        std = "tribal/fit.log",
        err = "tribal/fit.err.log"
    benchmark: "tribal/benchmark.log"
    shell:
        "python ../src/tribal.py --forest {input.forest} "
        "-r {params.root} -e {input.encoding} -s {params.seed}  "
        " --niter {params.niter} --mode {params.mode} "
        "--thresh {params.thresh} --transmat_infer {output.transmat}  "
        "--score {output.score}  "  
        "--nworkers {threads} --restarts {params.restarts} "
        "--heatmap {output.heatmap} > {log.std} 2> {log.err} "    


rule tribal_refine:
    input: 
        forest = "clonotypes.pkl",
        encoding = "human_encoding.txt",
        transmat = "tribal/transmat.txt",
    output: 
        tree= "tribal/{clonotype}/tree.txt",
        isotypes= "tribal/{clonotype}/isotypes.csv",
        score= "tribal/{clonotype}/scores.csv",
        png = "tribal/{clonotype}/tree.png",
        opts = directory("tribal/{clonotype}/opt_trees"),
        pickle_best = "tribal/{clonotype}/best_trees.pickle"
    params:
        root = "naive",
        mode = "refine_ilp"
    threads: config['nworkers']
    log: 
        run= "tribal/{clonotype}/refine.log",
        err ="tribal/{clonotype}/refine.err.log"  
    benchmark: "tribal/{clonotype}/refine.benchmark.log" 
    shell:
        "python ../src/tribal_tree.py "
        " -r {params.root} "
        " -f {input.forest} "
        "-c {wildcards.clonotype} "
        "-t {input.transmat} "
        "-e {input.encoding} "
        "--score {output.score} "
        "--iso_infer {output.isotypes} "
        "--png {output.png} "
        "--mode {params.mode} "
        "--all_optimal_sol {output.opts} "
        "--nworkers {threads} "
        "--tree {output.tree} "
        "--pickle_best {output.pickle_best} > {log.run} 2> {log.err} "  

   
