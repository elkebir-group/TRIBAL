configfile: "config.yaml"
reps = [i for i in range(config['nreps'])]
# reps = [i for i in range(51)]
clonotypes = [i+1 for i in range(config['size'])]
reps = [i for i in range(1,7)]
rule all:
    input:
        expand("sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_{mode}/{clonotype}/{alpha}/search_tree.png",
            n = [config["ncells"]],
            r = reps,
            k = [config["size"]],
            alpha= config["alpha"],
            clonotype= clonotypes,
            mode = ['search']
        )
        # expand( "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/{clonotype}/GCsim_{treetype}_tree.png",
        #     n = [config["ncells"]],
        #     # r = reps,
        #     r = [7],
        #     k = [config["size"]],
        #     # clonotype= clonotypes ,
        #     clonotype = [22],
        #     treetype = ["collapsed", "lineage"]
        # ),
        # expand("sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_refine/{clonotype}/{alpha}/inferred_collapsed_tree.png",
        #     n = [config["ncells"]],
        #     r = [1],
        #     k = [config["size"]],
        #     alpha= [0.75],
        #     clonotype= clonotypes
        # )
        # expand("sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_{mode}/{clonotype}/{alpha}/tree.png",
        #     n = [config["ncells"]],
        #     r = reps,
        #     k = [config["size"]],
        #     alpha=[0.75],
        #     clonotype= clonotypes,
        #     mode = ['score', 'refine'],
        # ),
        # expand("sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_{mode}_gt/{clonotype}/{alpha}/tree_gt.png",
        #     n = [config["ncells"]],
        #     r = reps,
        #     k = [config["size"]],
        #     alpha=[0.75],
        #     clonotype= clonotypes,
        #     mode = ['score', 'refine'],
        # )

        # expand("sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal/transmat.txt",
        #     n= [35],
        #     r = [1],
        #     k = [25],
        # ),
        # expand("sim_data/transmats/transmat{r}_heatmap.pdf",
        #     r = reps
        # ),
        # expand("sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal/inference_error.txt",
        #     n = [config["ncells"]],
        #     r = reps,
        #     k = [config["size"]]
        # ),
  
        # expand("sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_search_gt/{clonotype}/{alpha}/tree.png",
        #     n = [config["ncells"]],
        #     r = reps,
        #     k = [config["size"]],
        #     alpha= config["alpha"],
        #     clonotype= clonotypes 
        # ),
 
     
    

rule generate_gt_diagrams:
    input: 
        tmat = "sim_data/transmats/transmat{r}.txt",
        encoding = "sim_encoding.txt",
    output:
       pdf = "sim_data/transmats/transmat{r}.pdf",
       png = "sim_data/transmats/transmat{r}.png",
       heatmap = "sim_data/transmats/transmat{r}_heatmap.pdf"
    shell:
        "python ../src/draw_state_diagram.py -t {input.tmat} -e {input.encoding} "
        "-o {output.png} --pdf {output.pdf} --heatmap {output.heatmap} "


rule generate_gt_trees:
    input: 
        parents = "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/{clonotype}/GCsim_{treetype}_tree.parents",
        isotypes ="sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/{clonotype}/GCsim_{treetype}_tree.isotypes"
    output: "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/{clonotype}/GCsim_{treetype}_tree.png",
    shell:
        "python ../src/draw_tree.py -t {input.parents} -i {input.isotypes} -o {output}"


rule generate_inf_collapsed_trees:
    input: 
        parents = "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_refine/{clonotype}/{alpha}/inferred_collapsed_tree.parents",
        isotypes ="sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_refine/{clonotype}/{alpha}/inferred_collapsed_tree.isotype"
    output: "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_refine/{clonotype}/{alpha}/inferred_collapsed_tree.png",
    shell:
        "python ../src/draw_tree.py -t {input.parents} -i {input.isotypes} -o {output}"


rule tribal_infer:
    input: 
        clonotypes = "clonotypes_size{k}.txt", 
        encoding = "sim_encoding.txt",
    params:
        inpath = "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365",
        max_cand = config["max_cand"],
        niter = config["niter"],
        thresh = config["threshold"],
        root = "naive",
        outpath = "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal",
        tree_path =  "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365",
        nworkers = config['nworkers'],
        restarts = config["nrestarts"],
        mu = config["mu"],
        sigma = config["sigma"],
        fasta = "GCsim_dedup.fasta",
        isotypes =  "GCsim.isotypes",
        candidates = "dnapars/outtree",
        jump_prob = config["jump_prob"]
    output:
        transmat = "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal/transmat.txt",
        stateprobs = "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal/state_probs.txt",
        score ="sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal/fit_score.txt",
        diagram = "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal/diagram.png",
        diagram_pdf = "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal/diagram.pdf"
    benchmark: "benchmark/tribal_EM/cells{n}_size{k}_rep{r}.benchmark.log"
    log:
        std = "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal/fit.log",
        err = "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal/fit.err.log"
    shell:
        "python ../src/tribal.py -c {input.clonotypes} -p {params.inpath} --fasta {params.fasta} --isotypes {params.isotypes} "
        "-r {params.root} -e {input.encoding} -s {wildcards.r} --candidates {params.candidates} "
        "-o {params.outpath}  --niter {params.niter} -j {params.jump_prob} "
        "--thresh {params.thresh} --transmat_infer {output.transmat}  --tree_path {params.tree_path}  "
        "--state_probs {output.stateprobs} --score {output.score} --diagram_pdf {output.diagram_pdf}  "
        "--nworkers {params.nworkers} --restarts {params.restarts} --mu {params.mu} --sigma {params.sigma} "
        "--diagram {output.diagram} > {log.std} 2> {log.err} "


rule compare_tmats:
    input: 
        gt= "sim_data/transmats/transmat{r}.txt",
        infer =  "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal/transmat.txt",
    output: 
        heatmapInfer ="sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal/transmat.pdf",
        mse = "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal/inference_error.txt",
        heatmapDiff ="sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal/transmat_diff.pdf",
    run:
        import numpy as np 
        
        import sys 
        sys.path.insert(0, '/scratch/projects/tribal/src')
        from draw_state_diagram import DrawStateDiag
        
        gt = np.loadtxt(input.gt)
        infer = np.loadtxt(input.infer)
        diff = np.abs(gt-infer)
        n = diff.shape[0]
        n_params = n*(n+1)/2
        se = np.square(diff)
        mse = np.sum(se)/n_params 
        mae = np.sum(diff)/n_params
        DrawStateDiag(infer).heatmap(output.heatmapInfer)
        DrawStateDiag(diff).heatmap(output.heatmapDiff) 

        with open(output.mse, "w") as file:
            file.write("RMSE,MSE,MAE,nparams\n")
            file.write( f"{np.sqrt(mse)},{mse},{mae},{n_params}\n")




rule tribal_refine_score:
    input: 
        alignment= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/{clonotype}/GCsim_dedup.fasta",
        isotypes = "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/{clonotype}/GCsim.isotypes",
        transmat =   "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal/transmat.txt",
        candidates = "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/{clonotype}/dnapars/outtree",
        encoding = "sim_encoding.txt",
    output: 
        forest= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_{mode}/{clonotype}/{alpha}/forest.pickle",
        best_tree ="sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_{mode}/{clonotype}/{alpha}/tree.txt",
        seq= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_{mode}/{clonotype}/{alpha}/inferred_seq.csv",
        fasta= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_{mode}/{clonotype}/{alpha}/inferred_seq.fasta",
        isotypes= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_{mode}/{clonotype}/{alpha}/isotypes.csv",
        score= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_{mode}/{clonotype}/{alpha}/score.csv",
        png = "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_{mode}/{clonotype}/{alpha}/tree.png",
    params:
        root = "naive",
        ntrees = config["ntrees"]
    threads: config["nworkers"]
    log: 
        run= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_{mode}/{clonotype}/{alpha}/{mode}.log",
        err ="sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_{mode}/{clonotype}/{alpha}/{mode}.err.log"  
    benchmark: "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_{mode}/{clonotype}/{alpha}/{mode}.benchmark.log" 
    shell:
        "python ../src/tribal_sub.py "
        " -r {params.root} "
        "--candidates {input.candidates} "
        " -a {input.alignment} "
        "-t {input.transmat} "
        "-e {input.encoding} "
        "-i {input.isotypes} "
        "--alpha {wildcards.alpha} "
        "--sequences {output.seq} "
        "--fasta {output.fasta} "
        "--score {output.score} "
        "--iso_infer {output.isotypes} "
        "--png {output.png} "
        "--mode {wildcards.mode} "
        "--ntrees {params.ntrees} "
        "--nworkers {threads} "
        "--tree {output.best_tree} "
        "-o {output.forest} > {log.run} 2> {log.err} "  

rule tribal_refine_score_gt:
    input: 
        alignment= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/{clonotype}/GCsim_dedup.fasta",
        isotypes = "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/{clonotype}/GCsim.isotypes",
        transmat =   "sim_data/transmats/transmat{r}.txt",
        candidates = "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/{clonotype}/dnapars/outtree",
        encoding = "sim_encoding.txt",
    output: 
        forest= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_{mode}_gt/{clonotype}/{alpha}/forest.pickle",
        best_tree ="sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_{mode}_gt/{clonotype}/{alpha}/tree.txt",
        seq= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_{mode}_gt/{clonotype}/{alpha}/inferred_seq.csv",
        fasta= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_{mode}_gt/{clonotype}/{alpha}/inferred_seq.fasta",
        isotypes= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_{mode}_gt/{clonotype}/{alpha}/isotypes.csv",
        score= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_{mode}_gt/{clonotype}/{alpha}/score.csv",
        png = "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_{mode}_gt/{clonotype}/{alpha}/tree_gt.png",
    params:
        root = "naive",
        ntrees = config["ntrees"]
    threads: config["nworkers"]
    log: 
        run= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_{mode}_gt/{clonotype}/{alpha}/{mode}.log",
        err ="sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_{mode}_gt/{clonotype}/{alpha}/{mode}.err.log"  
    benchmark: "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_{mode}_gt/{clonotype}/{alpha}/{mode}.benchmark.log" 
    shell:
        "python ../src/tribal_sub.py "
        " -r {params.root} "
        "--candidates {input.candidates} "
        " -a {input.alignment} "
        "-t {input.transmat} "
        "-e {input.encoding} "
        "-i {input.isotypes} "
        "--alpha {wildcards.alpha} "
        "--sequences {output.seq} "
        "--fasta {output.fasta} "
        "--score {output.score} "
        "--iso_infer {output.isotypes} "
        "--png {output.png} "
        "--mode {wildcards.mode} "
        "--ntrees {params.ntrees} "
        "--nworkers {threads} "
        "--tree {output.best_tree} "
        "-o {output.forest} > {log.run} 2> {log.err} "  


rule tribal_search:
    input: 
        alignment= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/{clonotype}/GCsim_dedup.fasta",
        isotypes = "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/{clonotype}/GCsim.isotypes",
        transmat =    "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal/transmat.txt",
        lin_forest =  "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_refine/{clonotype}/0.75/forest.pickle",
        encoding = "sim_encoding.txt",
    output: 
        tree= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_search/{clonotype}/{alpha}/tree.txt",
        lin_forest =  "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_search/{clonotype}/{alpha}/forest.pickle",
        seq= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_search/{clonotype}/{alpha}/inferred_seq.csv",
        fasta= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_search/{clonotype}/{alpha}/inferred_seq.fasta",
        isotypes= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_search/{clonotype}/{alpha}/isotypes.csv",
        score= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_search/{clonotype}/{alpha}/score.csv",
        png = "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_search/{clonotype}/{alpha}/search_tree.png",
    params:
        root = "naive",
        timeout = config["search_timeout"],
        mode = "search",
        ntrees = config["ntrees"]
    threads: config['nworkers']
    log: 
        run= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_search/{clonotype}/{alpha}/search.log",
        err ="sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_search/{clonotype}/{alpha}/search.err.log"  
    benchmark: "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_search/{clonotype}/{alpha}/search.benchmark.log" 
    shell:
        "python ../src/tribal_sub.py "
        " -r {params.root} "
        " -a {input.alignment} "
        "-t {input.transmat} "
        "-e {input.encoding} "
        "-i {input.isotypes} "
        "-l {input.lin_forest} "
        "--forest "
        "--alpha {wildcards.alpha} "
        "--sequences {output.seq} "
        "--fasta {output.fasta} "
        "--score {output.score} "
        "--iso_infer {output.isotypes} "
        "--png {output.png} "
        "--mode {params.mode} "
        "--timeout {params.timeout} "
        "--nworkers {threads} "
        "--ntrees {params.ntrees} "
        "--tree {output.tree} "
        "-o {output.lin_forest} > {log.run} 2> {log.err} "  

rule tribal_search_gt:
    input: 
        alignment= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/{clonotype}/GCsim_dedup.fasta",
        isotypes = "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/{clonotype}/GCsim.isotypes",
        transmat =  "sim_data/transmats/transmat{r}.txt",
        lin_forest =  "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_refine_gt/{clonotype}/{alpha}/forest.pickle",
        encoding = "sim_encoding.txt",
    output: 
        tree= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_search_gt/{clonotype}/{alpha}/tree.txt",
        lin_forest =  "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_search_gt/{clonotype}/{alpha}/forest.pickle",
        seq= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_search_gt/{clonotype}/{alpha}/inferred_seq.csv",
        fasta= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_search_gt/{clonotype}/{alpha}/inferred_seq.fasta",
        isotypes= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_search_gt/{clonotype}/{alpha}/isotypes.csv",
        score= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_search_gt/{clonotype}/{alpha}/score.csv",
        png = "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_search_gt/{clonotype}/{alpha}/tree_search_gt.png",
    params:
        root = "naive",
        timeout = config["search_timeout"],
        mode = "search",
        ntrees = config["ntrees"]
    threads: config['nworkers']
    log: 
        run= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_search_gt/{clonotype}/{alpha}/search_gt.log",
        err ="sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_search_gt/{clonotype}/{alpha}/search_gt.err.log"  
    benchmark: "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/tribal_search_gt/{clonotype}/{alpha}/search_gt.benchmark.log" 
    shell:
        "python ../src/tribal_sub.py "
        " -r {params.root} "
        " -a {input.alignment} "
        "-t {input.transmat} "
        "-e {input.encoding} "
        "-i {input.isotypes} "
        "-l {input.lin_forest} "
        "--forest "
        "--alpha {wildcards.alpha} "
        "--sequences {output.seq} "
        "--fasta {output.fasta} "
        "--score {output.score} "
        "--iso_infer {output.isotypes} "
        "--png {output.png} "
        "--mode {params.mode} "
        "--timeout {params.timeout} "
        "--nworkers {threads} "
        "--ntrees {params.ntrees} "
        "--tree {output.tree} "
        "-o {output.lin_forest} > {log.run} 2> {log.err} "  


 


#TODO: update code to allow no transition matrix input 
rule gctree_isotype:
    input: 
        alignment= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/{clonotype}/GCsim_dedup.fasta",
        isotypes = "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/{clonotype}/GCsim.isotypes",
        candidates = "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/{clonotype}/dnapars/outtree",
        encoding = "sim_encoding.txt",
    output: 
        tree= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/gctree_isotype/{clonotype}/{alpha}/tree.txt",
        seq= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/gctree_isotype/{clonotype}/{alpha}/inferred_seq.csv",
        fasta= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/gctree_isotype/{clonotype}/{alpha}/inferred_seq.fasta",
        isotypes= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/gctree_isotype/{clonotype}/{alpha}/isotypes.csv",
        score= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/gctree_isotype/{clonotype}/{alpha}/score.csv",
        png = "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/gctree_isotype/{clonotype}/{alpha}/tree.png",
    params:
        root = "naive",
        mode = "score"
    log: 
        run= "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/gctree_isotype/{clonotype}/{alpha}/gctree_isotype.log",
        err ="sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/gctree_isotype/{clonotype}/{alpha}/gctree_isotype.err.log"  
    benchmark: "sim_data/replicates/cells{n}/size{k}/rep{r}/2.0/0.365/gctree_isotype/{clonotype}/{alpha}/gctree_isotype.benchmark.log" 
    shell:
        "python ../src/tribal_sub.py "
        " -r {params.root} "
        "--candidates {input.candidates} "
        " -a {input.alignment} "
        "-e {input.encoding} "
        "-i {input.isotypes} "
        "--alpha {wildcards.alpha} "
        "--sequences {output.seq} "
        "--fasta {output.fasta} "
        "--score {output.score} "
        "--iso_infer {output.isotypes} "
        "--png {output.png} "
        "--mode {params.mode} "
        "-o {output.tree} > {log.run} 2> {log.err} "  
