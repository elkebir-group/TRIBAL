configfile: "config.yaml"
import pandas as pd 


def get_clonotypes():
    datadir = config["dataset"]
    fname = f"{datadir}/clonotype_summary.csv"
    df = pd.read_csv(fname)
    return df['clonotype'].to_list()


rule all:
    input: 
        expand( "{dataset}/tribal/transmat.txt",
            dataset=config["dataset"],
        ),
        # expand("mut_levels/{dataset}_{mut}_levels_0.75.csv",
        #     dataset = config["dataset"],
        #     mut = config["mut"],
        # ),
        expand("{dataset}/{sub}Mut/state_probs.pdf",
            dataset = config["dataset"],
            sub = ["with", "without"]
        )
        # expand("{dataset}/clonotype_summary.csv",
        # dataset = config["dataset"]),
        # expand("{dataset}/input/{clonotype}/{seq}.aln.fasta",
        # dataset = config["dataset"],
        # clonotype= get_clonotypes(),
        # seq = config["seq"]),
        # expand("{dataset}/input/{clonotype}/concat.aln.fasta",
        # dataset = config["dataset"],
        # clonotype = get_clonotypes(),
        # ),
        # expand("{dataset}/input/{clonotype}/concat.algn.phylip",
        # dataset = config["dataset"],
        # clonotype = get_clonotypes(),
        # ),
        # expand( "{dataset}/dnapars/{clonotype}/dnapars.log",
        #  dataset = config["dataset"],
        #  clonotype = get_clonotypes(),
        # ),
  
        # expand( "{dataset}/tribal/{jump_prob}/transmat.pdf",
        #     dataset=config["dataset"],
        #     jump_prob = config["jump_probs"]
        # ),
        # expand("{dataset}/tribal_search/{clonotype}/{alpha}/search_tree.png",
        #     dataset=config["dataset"],
        #     alpha = config['alpha'],
        #     clonotype = get_clonotypes(),
        #     # clonotype = ["B_21_3_13_154_2_3"]
        # ),
        # expand("heatmaps/{dataset}.pdf",
        #     dataset = config["dataset"]
        # ),
        # expand("{dataset}/tribal_refine/{clonotype}/0.75/tree.png",
        #     dataset=config["dataset"],
        #     clonotype = get_clonotypes(),
        #     # clonotype = ["B_21_3_13_154_2_3"]
        # )


       


rule tribal_infer:
    input: 
        clonotypes = "{dataset}/clonotypes.txt",
        encoding = "mouse_isotype_encoding.txt",
    params:
        inpath = "./{dataset}/input",
        lamb = config["lamb"],
        max_cand = config["max_cand"],
        niter = config["niter"],
        thresh = config["threshold"],
        seed =  config["seed"],
        root = "naive",
        outpath = "./{dataset}/tribal/{jump_prob}",
        tree_path = "./{dataset}/dnapars",
        nworkers = config['nworkers'],
        restarts = config["nrestarts"],
        mu = config["mu"],
        sigma = config["sigma"]
        jump_prob = config["jump_prob"]
    output:
        transmat = "{dataset}/tribal/transmat.txt",
        stateprobs = "{dataset}/tribal/state_probs.txt",
        heatmap = "{dataset}/tribal/transmat.png",
        statmape = "{dataset}/tribal/statemap.png",
        score = "{dataset}/tribal/fit_score.txt",
    log:
        std = "{dataset}/tribal/fit.log",
        err = "{dataset}/tribal/fit.err.log"
    shell:
        "python ../src/tribal.py -c {input.clonotypes} -p {params.inpath} "
        "-r {params.root} -e {input.encoding} -s {params.seed} "
        "-o {params.outpath} --alpha {params.alpha} --niter {params.niter} "
        "--thresh {params.thresh} --transmat_infer {output.transmat}  --tree_path {params.tree_path}  "
        "--state_probs {output.stateprobs} --score {output.score}  "
        "--nworkers {params.nworkers} --restarts {params.restarts} --mu {params.mu} --sigma {params.sigma} "
        "--save_all_restarts {params.outpath} -j {params.jump_prob} "
        "--heatmap {output.heatmap} > {log.std} 2> {log.err} "


# rule state_pdf:
#     input: 
#         transmat =  "{dataset}/tribal/{jump_prob}/transmat.txt",
#         encoding = "mouse_labels.txt",
#     output: 
#         heatmap ="heatmaps/{dataset}_{jump_prob}.pdf",
#         state_heatmap="heatmaps/{dataset}_{jump_prob}_isotype_prop.pdf"
#     shell:
#         "python ../src/draw_state_diagram.py -t {input.transmat}  -e {input.encoding} "
#         "--heatmap {output.heatmap} --statemap {output.state_heatmap} "

# rule save_heatmap:
#     input: 
#         infer =  "{dataset}/tribal/0.25/transmat.txt",
#         encoding = "mouse_isotype_encoding.txt",
#     output: 
#         heatmap ="heatmaps/{dataset}.pdf",
#         png  ="heatmaps/{dataset}.png"
#     run:
#         import numpy as np 
#         import sys 
#         sys.path.insert(0, '/scratch/projects/tribal/src')
#         from draw_state_diagram import DrawStateDiag

#         infer = np.loadtxt(input.infer)
#         ds = DrawStateDiag(infer)
#         ds.heatmap(output.heatmap)
#         ds.heatmap(output.png)






rule tribal_refine:
    input: 
        alignment= "{dataset}/input/{clonotype}/concat.aln.fasta",
        isotypes = "{dataset}/input/{clonotype}/isotype.fasta",
        transmat =  "{dataset}/tribal/transmat.txt",
        candidates ="{dataset}/dnapars/{clonotype}/outtree",
        encoding = "mouse_isotype_encoding.txt",
    output: 
        forest="{dataset}/tribal_refine/{clonotype}/forest.pickle",
        tree= "{dataset}/tribal_refine/{clonotype}/tree.txt",
        seq= "{dataset}/tribal_refine/{clonotype}/inferred_seq.csv",
        fasta= "{dataset}/tribal_refine/{clonotype}/inferred_seq.fasta",
        isotypes= "{dataset}/tribal_refine/{clonotype}/isotypes.csv",
        score= "{dataset}/tribal_refine/{clonotype}/score.csv",
        png = "{dataset}/tribal_refine/{clonotype}/tree.png",
    params:
        root = "naive",
        mode = "refine",
        ntrees = config["ntrees"],
        lamb = config["lamb"],
    threads: config['nworkers']
    log: 
        run= "{dataset}/tribal_refine/{clonotype}/refine.log",
        err ="{dataset}/tribal_refine/{clonotype}/refine.err.log"  
    benchmark: "{dataset}/tribal_refine/{clonotype}/refine.benchmark.log" 
    shell:
        "python ../src/tribal_sub.py "
        " -r {params.root} "
        " -a {input.alignment} "
        "-t {input.transmat} "
        "-e {input.encoding} "
        "-i {input.isotypes} "
        "--candidates {input.candidates} "
        "--alpha {params.alpha} "
        "--sequences {output.seq} "
        "--fasta {output.fasta} "
        "--score {output.score} "
        "--iso_infer {output.isotypes} "
        "--png {output.png} "
        "--mode {params.mode} "
        "--ntrees {params.ntrees} "
        "--nworkers {threads} "
        "--tree {output.tree} "
        "-o {output.forest} > {log.run} 2> {log.err} "  

   
rule tribal_search:
    input: 
        alignment= "{dataset}/input/{clonotype}/concat.aln.fasta",
        isotypes = "{dataset}/input/{clonotype}/isotype.fasta",
        transmat =  "{dataset}/tribal/0.25/transmat.txt",
        lin_forest = "{dataset}/tribal_refine/{clonotype}/0.75/forest.pickle",
        encoding = "mouse_isotype_encoding.txt",
    output: 
        tree= "{dataset}/tribal_search/{clonotype}/{alpha}/tree.txt",
        lin_forest ="{dataset}/tribal_search/{clonotype}/{alpha}/forest.pickle",
        seq= "{dataset}/tribal_search/{clonotype}/{alpha}/inferred_seq.csv",
        fasta= "{dataset}/tribal_search/{clonotype}/{alpha}/inferred_seq.fasta",
        isotypes= "{dataset}/tribal_search/{clonotype}/{alpha}/isotypes.csv",
        score= "{dataset}/tribal_search/{clonotype}/{alpha}/score.csv",
        png = "{dataset}/tribal_search/{clonotype}/{alpha}/search_tree.png",
    params:
        root = "naive",
        timeout = config["search_timeout"],
        ntrees = config["ntrees"],
    threads: config["nworkers"]
    log: 
        run= "{dataset}/tribal_search/{clonotype}/{alpha}/search.log",
        err ="{dataset}/tribal_search/{clonotype}/{alpha}/search.err.log"  
    benchmark: "{dataset}/tribal_search/{clonotype}/{alpha}/search.benchmark.log" 
    shell:
        "python ../src/tribal_sub.py "
        " -r {params.root} "
        " -a {input.alignment} "
        "-t {input.transmat} "
        "-e {input.encoding} "
        "-i {input.isotypes} "
        "-l {input.lin_forest} "
        "--forest "
        "--alpha {wildcards.alpha} "
        "--sequences {output.seq} "
        "--fasta {output.fasta} "
        "--score {output.score} "
        "--iso_infer {output.isotypes} "
        "--png {output.png} "
        "--nworkers {threads} "
        "--ntrees {params.ntrees} "
        "--tree {output.tree} "
        "-o {output.lin_forest} > {log.run} 2> {log.err} "  





rule tribal_infer:
    input: 
        clonotypes = "{dataset}/clonotypes_{sub}Mut.txt",
        encoding = "mouse_isotype_encoding.txt",
    params:
        # inpath = "/scratch/projects/tribal/real_data/{dataset}/input",
        inpath ="/home/ec2-user/tribal/real_data/{dataset}/input",
        alpha = 0.75,
        max_cand = config["max_cand"],
        niter = config["niter"],
        thresh = config["threshold"],
        seed =  config["seed"],
        root = "naive",
        tree_path = "/home/ec2-user/tribal/real_data/{dataset}/dnapars",
        nworkers = config['nworkers'],
        restarts = config["nrestarts"],
        mu = config["mu"],
        sigma = config["sigma"],
        mode= "refine",
        jump_prob = 0.25
    output:
        transmat = "{dataset}/{sub}Mut/transmat.txt",
        stateprobs = "{dataset}/{sub}Mut/state_probs.txt",
        score = "{dataset}/{sub}Mut/fit_score.txt",
        diagram = "{dataset}/{sub}Mut/transmat.png",
        diagram_pdf = "{dataset}/{sub}Mut/transmat.pdf",
        heatmap = "{dataset}/{sub}Mut/heatmap.pdf"
    log:
        std = "{dataset}/{sub}Mut/fit.log",
        err = "{dataset}/{sub}Mut/fit.err.log"
    shell:
        "python ../src/tribal.py -c {input.clonotypes} -p {params.inpath} "
        "-r {params.root} -e {input.encoding} -s {params.seed} --mode {params.mode} "
        "--alpha {params.alpha} --niter {params.niter} "
        "--thresh {params.thresh} --transmat_infer {output.transmat}  --tree_path {params.tree_path}  "
        "--state_probs {output.stateprobs} --score {output.score} --diagram_pdf {output.diagram_pdf}  "
        "--nworkers {params.nworkers} --restarts {params.restarts} --mu {params.mu} --sigma {params.sigma} "
        "-j {params.jump_prob} --heatmap {output.heatmap} "
        "--diagram {output.diagram} > {log.std} 2> {log.err} "

