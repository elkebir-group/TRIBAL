configfile: "config.yaml"
import pandas as pd 


def get_clonotypes():
    datadir = "GCB_OVA_1"
    fname = f"/scratch/projects/tribal/real_data/{datadir}/clonotype_summary.csv"
    df = pd.read_csv(fname)
    return df['clonotype'].to_list()


rule all:
    input: 
        # expand("{run_dir}/clonotype_summary.csv",
        # run_dir = config["run_dir"]),
        # expand("{run_dir}/input/{clonotype}/{seq}.aln.fasta",
        # run_dir = config["run_dir"],
        # clonotype= get_clonotypes(),
        # seq = config["seq"]),
        # expand("{run_dir}/input/{clonotype}/concat.aln.fasta",
        # run_dir = config["run_dir"],
        # clonotype = get_clonotypes(),
        # ),
        # expand("{run_dir}/input/{clonotype}/concat.algn.phylip",
        # run_dir = config["run_dir"],
        # clonotype = get_clonotypes(),
        # ),
        # expand( "{run_dir}/dnapars/{clonotype}/dnapars.log",
        #  run_dir = config["run_dir"],
        #  clonotype = get_clonotypes(),
        # ),
        # expand( "{run_dir}/tribal/transmat.txt",
        #     run_dir=config["run_dir"],
        # ),
        expand( "{run_dir}/tribal/transmat.pdf",
            run_dir=config["run_dir"],
        ),
        # expand("{run_dir}/tribal_{mode}/{clonotype}/{alpha}/search_tree.png",
        #     run_dir=config["run_dir"],
        #     alpha = config['alpha'],
        #     mode = ["search"],
        #     clonotype = get_clonotypes(),
        #     # clonotype = ["B_21_3_13_154_2_3"]
        # )




rule preprocess:
    input: 
        data_fname = "{run_dir}/{run_dir}_dandelion_table.tsv",
        root_fname = "{run_dir}/{run_dir}_root_sequences.csv"
    params: 
        min_size = 5,
        pth = "/scratch/projects/tribal/real_data/{run_dir}/input"
    output: 
        summary = "{run_dir}/clonotype_summary.csv",
        id_mapping = "{run_dir}/barcode_id_mapping.csv"
    script:
        "scripts/preprocess.R"



rule align:
    input: 
        fasta = "{run_dir}/input/{clonotype}/{seq}.fasta",
        summary = "{run_dir}/clonotype_summary.csv"
    output: "{run_dir}/input/{clonotype}/{seq}.aln.fasta"
    log:
        err = "{run_dir}/input/{clonotype}/{seq}.muscle.err.log",
        std ="{run_dir}/input/{clonotype}/{seq}.muscle.log"
    shell:
        "./muscle5.1.linux_intel64 -align {input.fasta} -output {output} > {log.std} 2> {log.err}"


rule concat_fasta:
    input:
        light= "{run_dir}/input/{clonotype}/light.aln.fasta",
        heavy= "{run_dir}/input/{clonotype}/heavy.aln.fasta"
    output:  "{run_dir}/input/{clonotype}/concat.aln.fasta"
    shell:
        "python ../scripts/concat_fasta.py -l {input.light} -y {input.heavy} -o {output}"

rule convert_phylip:
    input: "{run_dir}/input/{clonotype}/concat.aln.fasta"
    output: "{run_dir}/input/{clonotype}/concat.algn.phylip"
    shell:
        "seqmagick convert {input} {output}"


rule dnapars_config:
    input: "{run_dir}/input/{clonotype}/concat.algn.phylip",
    output: "{run_dir}/dnapars/{clonotype}/dnapars.cfg",
    shell:
        "mkconfig {input} dnapars > {output} "


rule dnapars_run:
    input: "{run_dir}/dnapars/{clonotype}/dnapars.cfg",
    params: 
        direct="{run_dir}/dnapars/{clonotype}"
    output:  "{run_dir}/dnapars/{clonotype}/dnapars.log"
    shell:       
        """
        (
        cd {params.direct}
        dnapars < dnapars.cfg > dnapars.log
        )
        """
     
       

rule tribal_infer:
    input: 
        clonotypes = "{run_dir}/clonotypes.txt",
        transmat = "mouse_transmat2.txt",
        encoding = "mouse_isotype_encoding.txt",
    params:
        inpath = "/scratch/projects/tribal/real_data/{run_dir}/input",
        alpha = config["alpha"],
        max_cand = config["max_cand"],
        niter = config["niter"],
        thresh = config["threshold"],
        seed =  config["seed"],
        root = "naive",
        outpath = "/scratch/projects/tribal/real_data/{run_dir}/tribal",
        tree_path = "/scratch/projects/tribal/real_data/{run_dir}/dnapars"
    output:
        transmat = "{run_dir}/tribal/transmat.txt",
        stateprobs = "{run_dir}/tribal/state_probs.txt",
        score = "{run_dir}/tribal/fit_score.txt",
        diagram = "{run_dir}/tribal/transmat.png",
        diagram_pdf = "{run_dir}/tribal/transmat.pdf",
    log:
        std = "{run_dir}/tribal/fit.log",
        err = "{run_dir}/tribal/fit.err.log"
    shell:
        "python ../src/tribal.py -c {input.clonotypes} -p {params.inpath} "
        "-r {params.root} -t {input.transmat} -e {input.encoding} -s {params.seed} "
        "-o {params.outpath} --alpha {params.alpha} --niter {params.niter} "
        "--thresh {params.thresh} --transmat_infer {output.transmat}  --tree_path {params.tree_path}  "
        "--state_probs {output.stateprobs} --score {output.score} --diagram_pdf {output.diagram_pdf}  "
        "--diagram {output.diagram} > {log.std} 2> {log.err} "


# rule state_pdf:
#     input: 
#         transmat =  "{run_dir}/tribal/transmat.txt",
#         encoding = "mouse_isotype_encoding.txt",
#         stateprobs = "{run_dir}/tribal/state_probs.txt",
#     output: 
#         pdf = "{run_dir}/tribal/transmat.pdf",
#         png ="{run_dir}/tribal/transmat.png"
#     shell:
#         "python ../src/draw_state_diagram.py -t {input.transmat} -s {input.stateprobs} -e {input.encoding} --pdf {output.pdf} -o {output.png} "



rule tribal_search:
    input: 
        alignment= "{run_dir}/input/{clonotype}/concat.aln.fasta",
        isotypes = "{run_dir}/input/{clonotype}/isotype.fasta",
        transmat =  "{run_dir}/tribal/transmat.txt",
        lin_tree = "{run_dir}/tribal/{clonotype}/fit_tree.pickle",
        encoding = "mouse_isotype_encoding.txt",
    output: 
        tree= "{run_dir}/tribal_{mode}/{clonotype}/{alpha}/tree.txt",
        seq= "{run_dir}/tribal_{mode}/{clonotype}/{alpha}/inferred_seq.csv",
        fasta= "{run_dir}/tribal_{mode}/{clonotype}/{alpha}/inferred_seq.fasta",
        isotypes= "{run_dir}/tribal_{mode}/{clonotype}/{alpha}/isotypes.csv",
        score= "{run_dir}/tribal_{mode}/{clonotype}/{alpha}/score.csv",
        png = "{run_dir}/tribal_{mode}/{clonotype}/{alpha}/search_tree.png",
    params:
        root = "naive",
        timeout = config["search_timeout"]
    log: 
        run= "{run_dir}/tribal_{mode}/{clonotype}/{alpha}/search.log",
        err ="{run_dir}/tribal_{mode}/{clonotype}/{alpha}/search.err.log"  
    benchmark: "{run_dir}/tribal_{mode}/{clonotype}/{alpha}/search.benchmark.log" 
    shell:
        "python ../src/tribal_sub.py "
        " -r {params.root} "
        " -a {input.alignment} "
        "-t {input.transmat} "
        "-e {input.encoding} "
        "-i {input.isotypes} "
        "-l {input.lin_tree} "
        "--alpha {wildcards.alpha} "
        "--sequences {output.seq} "
        "--fasta {output.fasta} "
        "--score {output.score} "
        "--iso_infer {output.isotypes} "
        "--png {output.png} "
        "--mode {wildcards.mode} "
        "--timeout {params.timeout} "
        "-o {output.tree} > {log.run} 2> {log.err} "  





   


# rule tribal_fit:
#     input: 
#         alignment= "{run_dir}/input/{clonotype}/concat.aln.fasta",
#         isotypes = "{run_dir}/input/{clonotype}/isotype.fasta",
#         transmat = "mouse_transmat.txt",
#         candidate = "{run_dir}/dnapars/{clonotype}/outtree",
#         encoding = "mouse_isotype_encoding.txt"
#     output: 
#         tree= "{run_dir}/tribal_fit/{clonotype}/tree.txt",
#         seq= "{run_dir}/tribal_fit/{clonotype}/inferred_seq.csv",
#         fasta= "{run_dir}/tribal_fit/{clonotype}/inferred_seq.fasta",
#         isotypes= "{run_dir}/tribal_fit/{clonotype}/isotypes.csv",
#         score= "{run_dir}/tribal_fit/{clonotype}/score.csv",
#         png = "{run_dir}/tribal_fit/{clonotype}/tree.png",
#     params:
#         root = "naive",
#         cand =  "{run_dir}/tribal_fit/{clonotype}"
#     log: 
#         run= "{run_dir}/tribal_fit/{clonotype}/run.log",
#         err ="{run_dir}/tribal_fit/{clonotype}/err.log"  
#     shell:
#         "python ../src/tribal.py "
#         " -r {params.root} "
#         " -a {input.alignment} "
#         "-t {input.transmat} "
#         "-e {input.encoding} "
#         "-i {input.isotypes} "
#         "--init candidates "
#         "--candidates {input.candidate} "
#         "--alpha 0.9 "
#         "--sequences {output.seq} "
#         "--fasta {output.fasta} "
#         "--score {output.score} "
#         "--iso_infer {output.isotypes} "
#         "--fit "
#         "--png {output.png} "
#         "--save_candidates {params.cand} "
#         "-o {output.tree} > {log.run} 2> {log.err} "  


